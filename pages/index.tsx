import type { NextPage } from 'next'
import Link from 'next/link';
import Head from 'next/head'
import { useMemo, useState } from 'react'
import { useRouter } from 'next/dist/client/router';
import { Container, Button, Link as MuiLink, TextField } from '@material-ui/core'
import { makeStyles, createStyles } from '@material-ui/core/styles'
import { GetTodosQuery, useAddTodoMutation, useDeleteTodoMutation, useGetTodosQuery, useUpdateTodoMutation } from '../types/graphql-types';
import { GET_TODOS } from '../queries/TodosQuery';

const useStyles = makeStyles(theme => createStyles({
  linkActive: {
    fontWeight: theme.typography.fontWeightBold,
  },
}));

const Home: NextPage = () => {
  const classes = useStyles();
  const { query, asPath } = useRouter();
  const [draftTodo, setDraftTodo] = useState('');

  const { data } = useGetTodosQuery();
  const [addTodo, { loading: addingTodo }] = useAddTodoMutation({ refetchQueries: [{ query: GET_TODOS }] });
  const [updateTodo] = useUpdateTodoMutation({
    optimisticResponse: ({ id, input }) => ({ updateTodo: { id, ...input, complete: Boolean(input.complete) } }),
  });

  const [deleteTodo] = useDeleteTodoMutation({
    optimisticResponse: ({ id }) => ({ deleteTodo: id }),
    update: (cache, { data }) => {
      const deletedTodoId = data?.deleteTodo;
      const getTodosQuery = cache.readQuery<GetTodosQuery>({ query: GET_TODOS });
      const todo = getTodosQuery?.todos?.find(x => x.id === deletedTodoId);
      if (todo) {
        cache.evict({ id: cache.identify(todo) });
        cache.gc();
      }
    },
  });

  const filteredTodos = useMemo(() => {
    if (!data?.todos) { return []; }
    if (!query.complete) {
      return data.todos;
    }
    const complete = query.complete === 'complete';
    return data.todos.filter(x => x.complete === complete);
  }, [data, query.complete]);

  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Link replace href="/" passHref>
          <MuiLink className={asPath === '/' ? classes.linkActive : ''}>
            All
          </MuiLink>
        </Link>
        <Link replace href={'/active'} passHref>
          <MuiLink className={asPath === '/active' ? classes.linkActive : ''}>
            Active
          </MuiLink>
        </Link>
        <Link replace href={'/complete'} passHref>
          <MuiLink className={asPath === '/complete' ? classes.linkActive : ''}>
            Complete
          </MuiLink>
        </Link>

        <form onSubmit={async e => {
          e.preventDefault();
          const { errors } = await addTodo({ variables: { input: { text: draftTodo, complete: false } } });
          if (!errors) {
            setDraftTodo('');
          }
        }}>
          <TextField
            label="Add todo"
            value={draftTodo}
            onChange={e => setDraftTodo(e.currentTarget.value)}
          />
          <Button type="submit" variant="contained" color="primary" disabled={addingTodo || draftTodo.trim() === ''}>
            Add
          </Button>
        </form>

        <ul>
          {filteredTodos.map(({ id, ...todo }) => (
            <li key={id}>
              <input type="checkbox" checked={todo.complete} onChange={() => {
                updateTodo({ variables: { id, input: { ...todo, complete: !todo.complete } } });
              }} />
              {todo.text}
              <Button onClick={() => deleteTodo({ variables: { id } })}>delete</Button>
            </li>
          ))}
        </ul>
      </main>

    </Container>
  )
}

export default Home
